<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>METANIT.COM</title>
    <style>

        h2 {
            font-weight: bold;
        }
        td {
            padding: 5px;
        }

        button {
            margin: 5px;
        }
    </style>
</head>
<body>
    <h2>Список адресов</h2>
    <div>
        <input type="hidden" id="id" />
        <p>
            Улица:<br />
            <input id="street" />
        </p>
        <p>
            Город:<br />
            <input id="city" />
        </p>
        <p>
            Область:<br />
            <input id="state" />
        </p>
        <p>
            <button id="saveBtn">Сохранить</button>
            <button id="resetBtn">Сбросить</button>
        </p>
    </div>
    <table>
        <thead>
            <tr>
                <th>Улица</th>
                <th>Город</th>
                <th>Область</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>

    <script>

        var addressApi = "/api/Addresses/";

        function row(itemRow) {
            const tr = document.createElement("tr");
            tr.setAttribute("data-rowid", itemRow.id);

            const nameTd = document.createElement("td");
            nameTd.append(itemRow.street);
            tr.append(nameTd);

            const ageTd = document.createElement("td");
            ageTd.append(itemRow.city);
            tr.append(ageTd);

            const stateTd = document.createElement("td");
            stateTd.append(itemRow.state);
            tr.append(stateTd);

            const linksTd = document.createElement("td");

            const editLink = document.createElement("button");
            editLink.append("Изменить");
            editLink.addEventListener("click", async () => await getOne(itemRow.id));
            linksTd.append(editLink);

            const removeLink = document.createElement("button");
            removeLink.append("Удалить");
            removeLink.addEventListener("click", async () => await deleteOne(itemRow.id));

            linksTd.append(removeLink);
            tr.appendChild(linksTd);

            return tr;
        }

        async function getAll() {
            const response = await fetch(addressApi, {
                method: "GET",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                const elements = await response.json();
                const rows = document.querySelector("tbody");
                elements.forEach(element => rows.append(row(element)));
            }
        }

        async function createOne(newItem) {

            const response = await fetch(`${addressApi}`, {
                method: "POST",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify(newItem)
            });
            if (response.ok === true) {
                const itemRow = await response.json();
                document.querySelector("tbody").append(row(itemRow));
            }
            else {
                const error = await response.json();
                console.log(error.message);
            }
        }

        async function editOne(id, newData) {
            let newItem = {
                id
            }
            Object.assign(newItem, newData);
            const response = await fetch(`${addressApi}${id}`, {
                method: "PUT",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: JSON.stringify(newItem)
            });
            if (response.ok === true) {
                document.querySelector(`tr[data-rowid='${id}']`).replaceWith(row(newItem));
            }
            else {
                const error = await response.json();
                console.log(error.message);
            }
        }

        async function deleteOne(id) {
            const response = await fetch(`${addressApi}${id}`, {
                method: "DELETE",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                document.querySelector(`tr[data-rowid='${id}']`).remove();
                let curId = document.getElementById("id").value
                if (curId == id) {
                    resetForm();
                }
            }
            else {
                const error = await response.json();
                console.log(error.message);
            }
        }

       

        async function getOne(id) {
            const response = await fetch(`${addressApi}${id}`, {
                method: "GET",
                headers: { "Accept": "application/json" }
            });
            if (response.ok === true) {
                const itemRow = await response.json();
                document.getElementById("id").value = itemRow.id;
                document.getElementById("street").value = itemRow.street;
                document.getElementById("city").value = itemRow.city;
                document.getElementById("state").value = itemRow.state;
            }
            else {
                const error = await response.json();
                console.log(error.message);
            }
        }

        function resetForm() {
            document.getElementById("id").value =
            document.getElementById("street").value =
            document.getElementById("city").value = "";
            document.getElementById("state").value = "";

        }

        document.getElementById("resetBtn").addEventListener("click", () => resetForm());
        document.getElementById("saveBtn").addEventListener("click", async () => {
            const id = document.getElementById("id").value;
            const currentItem = {
                street: document.getElementById("street").value,
                city: document.getElementById("city").value, 
                state: document.getElementById("state").value 
            }
            if (id === "")
                await createOne(currentItem);
            else
                await editOne(id, currentItem);
            resetForm();
        });

        getAll();
    </script>
</body>
</html>